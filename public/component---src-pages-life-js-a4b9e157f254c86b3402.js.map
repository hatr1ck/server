{"version":3,"sources":["webpack:///./src/pages/life.js"],"names":["WIDTH","HEIGHT","Cell","render","this","props","x","y","style","background","position","left","top","width","height","React","Component","Game","state","cells","isRunning","runGame","setState","runIteration","stopGame","timeoutHandler","window","clearTimeout","handleIntervalChange","event","interval","target","value","handleClick","elemOffset","getElementOffset","offsetX","clientX","offsetY","clientY","Math","floor","cols","rows","board","makeCells","handleRandom","random","handleClear","makeEmptyBoard","boardRef","createRef","console","log","newBoard","neighbors","calculateNeighbors","setTimeout","dirs","i","length","dir","y1","x1","push","rect","current","getBoundingClientRect","doc","document","documentElement","pageXOffset","clientLeft","pageYOffset","clientTop","className","onClick","variant","backgroundSize","ref","map","cell","key"],"mappings":"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","file":"component---src-pages-life-js-a4b9e157f254c86b3402.js","sourcesContent":["import React from 'react';\r\nimport '../styles/life.css';\r\nimport { Button, ButtonToolbar } from 'react-bootstrap';\r\nimport Header from '../components/header'\r\nexport const WIDTH = 800;\r\nexport const HEIGHT = 600;\r\n\r\nclass Cell extends React.Component {\r\n  render() {\r\n    const {x, y} = this.props;\r\n    return (\r\n        <div style={{\r\n            background: '#73b76e',\r\n            position: 'absolute',\r\n          left: `${20 * x + 1}px`,\r\n          top: `${20 * y + 1}px`,\r\n          width: `${20 - 1}px`,\r\n          height: `${20 - 1}px`,\r\n        }}\r\n        />\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  state = {cells: [], isRunning: false};\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.rows = 30;\r\n    this.cols = 40;\r\n    this.board = this.makeEmptyBoard();\r\n    this.boardRef = React.createRef();\r\n  }\r\n\r\n  runGame = () => {\r\n    this.setState({isRunning: true});\r\n    this.runIteration();\r\n  };\r\n\r\n  stopGame = () => {\r\n    this.setState({isRunning: false});\r\n    if (this.timeoutHandler) {\r\n      window.clearTimeout(this.timeoutHandler);\r\n      this.timeoutHandler = null;\r\n    }\r\n  };\r\n\r\n  runIteration() {\r\n    console.log('running iteration');\r\n    let newBoard = this.makeEmptyBoard();\r\n\r\n    // Game logic\r\n    for (let y = 0; y < this.rows; y++) {\r\n      for (let x = 0; x < this.cols; x++) {\r\n        let neighbors = this.calculateNeighbors(this.board, x, y);\r\n        if (this.board[y][x]) {\r\n          if (neighbors === 2 || neighbors === 3) {\r\n            newBoard[y][x] = true;\r\n          } else {\r\n            newBoard[y][x] = false;\r\n          }\r\n        } else {\r\n          if (!this.board[y][x] && neighbors === 3) {\r\n            newBoard[y][x] = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.board = newBoard;\r\n    this.setState({cells: this.makeCells()});\r\n    this.timeoutHandler = window.setTimeout(() => {\r\n      this.runIteration();\r\n    }, 100);\r\n  }\r\n\r\n  calculateNeighbors(board, x, y) {\r\n    let neighbors = 0;\r\n    const dirs = [[-1, -1], [-1, 0], [-1, 1], [0, 1], [1, 1], [1, 0], [1, -1], [0, -1]];\r\n    for (let i = 0; i < dirs.length; i++) {\r\n      const dir = dirs[i];\r\n      let y1 = y + dir[0];\r\n      let x1 = x + dir[1];\r\n\r\n      if (x1 >= 0 && x1 < this.cols && y1 >= 0 && y1 < this.rows && board[y1][x1]) {\r\n        neighbors++;\r\n      }\r\n    }\r\n\r\n    return neighbors;\r\n  }\r\n\r\n  makeEmptyBoard() {\r\n    let board = [];\r\n    for (let y = 0; y < this.rows; y++) {\r\n      board[y] = [];\r\n      for (let x = 0; x < this.cols; x++) {\r\n        board[y][x] = false;\r\n      }\r\n    }\r\n    return board;\r\n  }\r\n\r\n  makeCells() {\r\n    let cells = [];\r\n    for (let y = 0; y < this.rows; y++) {\r\n      for (let x = 0; x < this.cols; x++) {\r\n        if (this.board[y][x]) {\r\n          cells.push({x, y});\r\n        }\r\n      }\r\n    }\r\n    return cells;\r\n  }\r\n\r\n  getElementOffset() {\r\n    const rect = this.boardRef.current.getBoundingClientRect();\r\n    const doc = document.documentElement;\r\n    return {\r\n      x: (rect.left + window.pageXOffset) - doc.clientLeft,\r\n      y: (rect.top + window.pageYOffset) - doc.clientTop,\r\n    };\r\n  }\r\n\r\n  handleIntervalChange = (event) => {\r\n    this.setState(this.setState({interval: event.target.value}));\r\n  };\r\n\r\n  handleClick = (event) => {\r\n    const elemOffset = this.getElementOffset();\r\n    const offsetX = event.clientX - elemOffset.x;\r\n    const offsetY = event.clientY - elemOffset.y;\r\n\r\n    const x = Math.floor(offsetX / 20);\r\n    const y = Math.floor(offsetY / 20);\r\n\r\n    if (x >= 0 && x <= this.cols && y >= 0 && y <= this.rows) {\r\n      this.board[y][x] = !this.board[y][x];\r\n    }\r\n    this.setState({cells: this.makeCells()});\r\n  };\r\n\r\n  handleRandom = () => {\r\n    for (let y = 0; y < this.rows; y++) {\r\n      for (let x = 0; x < this.cols; x++) {\r\n        this.board[y][x] = (Math.random() >= 0.5);\r\n      }\r\n    }\r\n    this.setState({cells: this.makeCells()});\r\n  };\r\n\r\n  handleClear = () => {\r\n    this.board = this.makeEmptyBoard();\r\n    this.setState({cells: this.makeCells()});\r\n  };\r\n\r\n\r\n  render() {\r\n    const {cells} = this.state;\r\n    return (\r\n        <div className='life'>\r\n          <Header/>\r\n<div className=\"lifePanel\">\r\n        <ul>\r\n          <h6>The Rules:</h6>\r\n          <li>Any live cell with two or three neighbors survives.</li>\r\n          <li>Any dead cell with three live neighbors becomes a live cell.</li>\r\n          <li>All other live cells die in the next generation. Similarly, all other dead cells stay dead.</li>\r\n          <h6>Controls:</h6>\r\n        </ul>\r\n            <Button className='lifeButton' onClick={this.handleRandom} variant=\"primary\">Randomize</Button>\r\n            {this.state.isRunning ?\r\n            <Button className='lifeButton' onClick={this.stopGame} variant=\"warning\">Stop</Button>:\r\n            <Button className='lifeButton' onClick={this.runGame} variant=\"success\">Start</Button>}\r\n            <Button className='lifeButton' onClick={this.handleClear} variant=\"secondary\">Clear</Button>\r\n          \r\n        </div>\r\n        <div className=\"Board\"\r\n               style={{\r\n                 width: WIDTH,\r\n                 height: HEIGHT,\r\n                 backgroundSize: \"20px 20px\"\r\n               }}\r\n               onClick={this.handleClick}\r\n               ref={this.boardRef}\r\n          >\r\n          {cells.map(cell => (\r\n              <Cell x={cell.x} y={cell.y} key={`${cell.x},${cell.y}`}/>\r\n          ))}\r\n          </div>\r\n</div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default Game;"],"sourceRoot":""}